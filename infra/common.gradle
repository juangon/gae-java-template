/*
 * Copyright 2013, Rogue.IO
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Common application wide settings that will be included in each of the sub projects.
 */

apply plugin: 'java'

ant.importBuild new File(rootDir, 'infra/integration-build.xml').absolutePath

repositories {

    flatDir {
        dirs new File(rootDir, 'lib')
    }

    mavenCentral();

    maven {
        url 'https://maven.java.net/content/repositories/releases/'
    }

    maven {
        url 'http://repository.primefaces.org'
    }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
configurations {
    envsetup
    provided
    jdo {
        extendsFrom compile
    }
}

sourceSets {
    main {
        java {
            compileClasspath += configurations.provided
        }
    }
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

dependencies {
    envsetup rootProject.ext.gaeArtifactGroup + ':' + rootProject.ext.gaeArtifactName + ':' + rootProject.ext.gaeArtifactVersion

    compile fileTree(dir: rootProject.ext.gaeSdkFldrPath + '/lib/user/', include: '**/appengine-api-1.0-sdk*.jar')
    compile fileTree(dir: rootProject.ext.gaeSdkFldrPath + '/lib/opt/user', include: 'appengine-api-labs/v1/*.jar')
    compile fileTree(dir: rootProject.ext.gaeSdkFldrPath + '/lib/opt/user', include: 'jsr107/v1/*.jar')
    compile fileTree(dir: rootProject.ext.gaeSdkFldrPath + '/lib/opt/user', include: 'datanucleus/v2/*.jar')

    jdo fileTree(dir: rootProject.ext.gaeSdkFldrPath + '/lib/opt/tools/datanucleus/v2', include: 'datanucleus-enhancer*.jar')
}

classes.doLast {

    // Execute the DataNucleus enhancer if required
    if (project.ext.has('enhanceClasses') && sourceSets.main.output.classesDir.exists()) {
        ant.properties['gaeSdkPath'] = rootProject.gaeSdkFldrPath
        ant.properties['classesDir'] = sourceSets.main.output.classesDir.canonicalPath.toURI().toString()
        ant.properties['compileClassPath'] = configurations.jdo.asPath + ':' + configurations.provided.asPath

        tasks['enhanceClasses'].execute()
    }
}

task setupEnv(dependsOn: 'setup_GAE_SDK') << {
}

/**
 * GAE/J related tasks.
 */

// Ensures that the GAE SDK has been setup for the current project.
task setup_GAE_SDK << {

    // Download & Verify that the app engine has been specified.
    def gaeDepSet = configurations.envsetup.dependencies
                                  .findAll { dep -> (dep.group == gaeArtifactGroup && dep.name == gaeArtifactName) }

    // Verify that there is only one GAE dependency defined. Warn the user otherwise
    if (gaeDepSet.isEmpty()) {
        ant.fail('ERROR: No GAE/J SDK specified as a dependency to the \'envsetup\' configuration')
    }

    if (gaeDepSet.size() != 1) {
        println 'WARNING: Multiple GAE/J SDKs specified in the \'envsetup\' configuration dependency.'
    }

    // Create the folder if it doesn't exist
    File rootSdkFldr = new File(rootDir, gaeArtifactName)
    if (!rootSdkFldr.exists()) {
        rootSdkFldr.mkdir()
    }

    if (!gaeSdkFldr.exists()) {
        // Unpack the SDK here.
        println 'Unpacking the GAE/J SDK files'
        configurations.envsetup.files { dep -> (dep.group == gaeArtifactGroup && dep.name == gaeArtifactName) }
                      .each { file ->
            if (file.isFile() && file.getName().endsWith('.zip')) {
                task('unzipSDK', type: Copy)
                        .from(zipTree(file))
                        .into(rootSdkFldr)
                        .execute()
            }
        }

        // Verify that the folder was created. This acts a secondary check in the event of the packaging scheme of GAE/J
        // changing
        if (!gaeSdkFldr.exists()) {
            ant.fail("The GAE/J artifact packaging has changed. Could not find the sdk folder "
                             + gaeSdkFldr.absolutePath + " build script.")
        }
    }
}

// Task to launch the dev_app_server
task launchDevAppServer(dependsOn: build) << {
    File gaeWarDir = new File(file(buildDir), 'war_exploded');
    if (!gaeWarDir.exists()) {
        gaeWarDir.mkdir()
    }

    File[] warFiles = libsDir.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.endsWith('.war')
        }
    })

    if (warFiles.length != 1) {
        ant.fail('Multiple war files detected')
    }

    // Unzip the war file to the app_war directory
    task('unzipWar', type: Copy)
            .from(zipTree(warFiles[0]))
            .into(gaeWarDir)
            .execute()

    task('launchGAEServer', type: JavaExec) {
        main = 'com.google.appengine.tools.KickStart'
        classpath = files(rootProject.ext.gaeSdkFldrPath + '/lib/appengine-tools-api.jar')
        args = ['com.google.appengine.tools.development.DevAppServerMain', '--port=8888', '--address=0.0.0.0', '--jvm_flag=-Xdebug', '--jvm_flag=-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999', gaeWarDir.absolutePath]
    }
    .execute()
}